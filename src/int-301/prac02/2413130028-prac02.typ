#import "@preview/showybox:2.0.4": showybox

#set page(header: [
	*2413130028 นายทรงพล อนันต์เนติกุล*
	#line(length: 100%)
])
#set text(font: "Noto Sans Thai", size: 10pt)

#show heading: set text(size: 12pt)
#show heading.where(level: 1): set text(size: 16pt)
#show heading.where(level: 2): set text(size: 12pt)
#show heading.where(level: 2): set heading(numbering: "1.1)")

#let section(body) = {
	body
	line(length: 100%)
	pagebreak(weak: true)
}

= แบบฝึกหัดบทที่ 2

#context counter(heading).update((1, 0))

#section[
	== อธิบายความสำคัญของ Data Modeling

	การทำแบบจำลองข้อมูล (Data Modeling) คือ การสร้างแบบจำลองที่แสดงถึงโครงสร้างและความสัมพันธ์ของข้อมูลในระบบฐานข้อมูล

	*แบบจำลองมี 3 ประเภท ได้แก่:*
	+ *Conceptual Data Model (CDM):* แสดงความสัมพันธ์ของข้อมูลในระดับสูง แสดงถึงความต้องการทางธุรกิจ โดยยังไม่คำนึงถึงโครงสร้างที่ใช้จัดเก็บข้อมูล
	+ *Logical Data Model (LDM):* แสดงการจัดระเบียบและโครงสร้างของข้อมูล แสดงรายละเอียดของข้อมูลในระดับที่ลึกขึ้น เช่น ชนิดข้อมูล ความสัมพันธ์ระหว่างตาราง แต่ยังไม่คำนึงถึงเทคโนโลยีที่ใช้ในการจัดเก็บข้อมูล
	+ *Physical Data Model (PDM):* แสดงโครงสร้างข้อมูลในระดับที่ลึกที่สุด รวมถึงการกำหนดตาราง ชนิดข้อมูล ข้อจำกัดต่าง ๆ ที่ใช้ในการจัดเก็บข้อมูลในระบบฐานข้อมูลจริง โดยจะมีความแตกต่างกันไปตามเทคโนโลยีที่ใช้ เช่น Oracle, MySQL, PostgreSQL เป็นต้น

	การทำแบบจำลองข้อมูลจะช่วยให้ผู้พัฒนาระบบสามารถเข้าใจความต้องการของธุรกิจ และออกแบบฐานข้อมูลที่ตอบสนองต่อความต้องการเหล่านั้นได้อย่างมีประสิทธิภาพและถูกต้อง
	นอกจากนี้ยังช่วยให้การสื่อสารระหว่างผู้พัฒนาระบบและผู้ใช้งานเป็นไปได้อย่างราบรื่น เนื่องจากมีแบบจำลองที่ชัดเจนในการอธิบายโครงสร้างและความสัมพันธ์ของข้อมูล

	== อธิบายลักษณะพื้นฐานของ Relational Data Model และความสำคัญของลักษณะเหล่านี้ที่มีต่อผู้ใช้และผู้ออกแบบฐานข้อมูล

	Relational Data Model (RDM) หรือ โมเดลข้อมูลเชิงสัมพันธ์ เป็นโมเดลข้อมูลที่ใช้ในการจัดเก็บและจัดการข้อมูลในรูปแบบของสัมพันธ์ระหว่างข้อมูล (relation) หรือ ตาราง (tables)

	*มีลักษณะพื้นฐานคือ:*
	- มีโครงสร้างข้อมูลที่เป็นตาราง (tables) ซึ่งประกอบด้วยแถว (rows) และคอลัมน์ (columns)
	- รองรับรูปแบบความสัมพันธ์ระหว่างข้อมูลทั้งแบบ 1:1, 1:M และ M:N
	- รองรับการใช้คีย์หลัก (primary key) และคีย์ต่างประเทศ (foreign key) เพื่อสร้างความสัมพันธ์ระหว่างตาราง
	- มีการควบคุมความถูกต้องของข้อมูล (data integrity)
	- ใช้ SQL (Structured Query Language) ในการเข้าถึงและจัดการข้อมูล

	*ความสำคัญต่อผู้ใช้และผู้ออกแบบฐานข้อมูล:*
	- ช่วยให้ผู้ใช้สามารถเข้าถึงและจัดการข้อมูลได้อย่างมีประสิทธิภาพ โดยไม่ต้องรู้รายละเอียดของการจัดเก็บข้อมูล
	- ช่วยให้ผู้ออกแบบฐานข้อมูลสามารถออกแบบโครงสร้างข้อมูลที่เหมาะสมกับความต้องการของธุรกิจ และสามารถปรับเปลี่ยนโครงสร้างได้ง่ายเมื่อมีการเปลี่ยนแปลงความต้องการ
	- ช่วยให้การจัดการข้อมูลมีความยืดหยุ่นและสามารถปรับขนาดได้ตามความต้องการของระบบ

	#pagebreak()

	== วาด ER จาก "A customer can make many payments." แต่ละการชำระเงินมาจากลูกค้าคนเดียว

	#showybox(image("./er1-3.png"))

	== วาด OO Model จาก ข้อ 3.

	#showybox(image("./oom1-4.png"))

	#pagebreak()

	== อธิบายความแตกต่างของ Object และคลาส ใน Object-oriented Data Model (OODM)

	- *Class* คือ คำอธิบายหรือแม่แบบ (blueprint) ของวัตถุ (object) ที่มีคุณสมบัติ (attribute/property) และพฤติกรรม (behavior/method) ที่เหมือนกัน
		เช่น คลาส "รถยนต์" อาจมีคุณสมบัติ เช่น ยี่ห้อ, รุ่น, สี และพฤติกรรม เช่น ขับเคลื่อน, หยุด
	- *Object* คือ อินสแตนซ์ (instance) ของคลาส ซึ่งเป็นวัตถุที่มีคุณสมบัติและพฤติกรรมตามที่กำหนดในคลาส โดยแต่ละวัตถุจะมีค่าของคุณสมบัติที่แตกต่างกัน
		เช่น วัตถุ "รถยนต์1" อาจมีคุณสมบัติ ยี่ห้อ = "Toyota", รุ่น = "Corolla", สี = "แดง"

	== อะไรคือ relationship และอธิบายชนิดของ relationship พร้อมยกตัวอย่าง

	Relationship คือ ความสัมพันธ์ระหว่างเอนทิตี (entity) ในฐานข้อมูล ซึ่งแสดงถึงการเชื่อมโยงข้อมูลระหว่างตารางต่าง ๆ ในระบบฐานข้อมูล

	*ชนิดของ relationship มี 3 ประเภทหลัก ได้แก่:*
	+ *One-to-One (1:1):* ความสัมพันธ์ระหว่างเอนทิตีสองตัวที่แต่ละตัวมีความสัมพันธ์กับอีกตัวหนึ่งเพียงตัวเดียว
		เช่น หนึ่งบุคคลมีหนึ่งบัตรประชาชน
	+ *One-to-Many (1:N):* ความสัมพันธ์ระหว่างเอนทิตีหนึ่งตัวที่มีความสัมพันธ์กับหลายตัว
		เช่น หนึ่งลูกค้าสามารถทำการสั่งซื้อได้หลายรายการ
	+ *Many-to-Many (M:N):* ความสัมพันธ์ระหว่างเอนทิตีสองตัวที่แต่ละตัวสามารถมีความสัมพันธ์กับอีกตัวหนึ่งได้หลายตัว
		เช่น หลักสูตรหนึ่งสามารถมีนักเรียนหลายคนลงทะเบียน และนักเรียนหนึ่งคนสามารถลงทะเบียนในหลักสูตรหลายหลักสูตร

	== ตารางคืออะไร และมีบทบาทสำคัญอย่างไรใน relational data model

	ตาราง (table) คือ โครงสร้างพื้นฐานที่ใช้ในการจัดเก็บข้อมูลใน Relational Data Model
	โดยข้อมูลจะถูกจัดเก็บในรูปแบบของแถว (rows) และคอลัมน์ (columns)

	- *ตาราง (Tables):* ข้อมูลจะถูกจัดเก็บในรูปแบบของตาราง ซึ่งประกอบด้วยแถว (rows) และคอลัมน์ (columns) โดยแต่ละตารางจะแทนข้อมูลของเอนทิตี (entity) หนึ่ง ๆ เช่น ตารางลูกค้า, ตารางสินค้า เป็นต้น
	- *แถว (Rows):* แต่ละแถวในตารางจะแทนข้อมูลของเอนทิตีนั้น ๆ หนึ่งรายการ เช่น ข้อมูลของลูกค้าแต่ละคน ข้อมูลของสินค้าแต่ละรายการ เป็นต้น
	- *คอลัมน์ (Columns):* แต่ละคอลัมน์ในตารางจะแทนคุณสมบัติ (attribute) ของเอนทิตี เช่น ชื่อ, ที่อยู่, เบอร์โทรศัพท์, ราคาสินค้า, จำนวนสินค้าคงเหลือ เป็นต้น

	*บทบาทสำคัญของตารางใน Relational Data Model คือ:*
	- จัดระเบียบข้อมูลให้อยู่ในรูปแบบที่เข้าใจง่าย
	- ช่วยให้สามารถเข้าถึงและจัดการข้อมูลได้อย่างมีประสิทธิภาพ
	- ช่วยให้สามารถสร้างความสัมพันธ์ระหว่างข้อมูลในตารางต่าง ๆ ได้อย่างชัดเจน

	== ER diagram คืออะไร จงยกตัวอย่างประกอบ

	ER diagram (Entity-Relationship Diagram) คือ แผนภาพที่ใช้ในการแสดงความสัมพันธ์ระหว่างเอนทิตี (entity) และความสัมพันธ์ (relationship) ในฐานข้อมูล

	ER diagram ประกอบด้วยองค์ประกอบหลัก 3 ประเภท ได้แก่ เอนทิตี (entity), แอตทริบิวต์ (attribute) และความสัมพันธ์ (relationship)

	*ตัวอย่าง:*
	- *เอนทิตี:* ลูกค้า (Customer), สินค้า (Product), การสั่งซื้อ (Order)
	- *แอตทริบิวต์:* ชื่อลูกค้า (Customer Name), รหัสสินค้า (Product ID), วันที่สั่งซื้อ (Order Date)
	- *ความสัมพันธ์:*
		- Customer 1:N Order (ลูกค้าสามารถทำการสั่งซื้อได้หลายรายการ โดยแต่ละรายการสั่งซื้อจะมีลูกค้าเพียงคนเดียว)
		- Order M:N Product (รายการสั่งซื้อสามารถมีสินค้าหลายรายการ และสินค้าหนึ่งรายการสามารถอยู่ได้ในหลายรายการสั่งซื้อ)
]

#context counter(heading).update((2, 0))

#section[
	#showybox(image("./img1.png"))

	== Identify each relationship type and write all of the business rules.

	== Create the basic Crow's Foot ERD for DealCo.
]

#section[
	#showybox(image("./img2.png"))

	== Identify each relationship type and write all of the business rules.

	== Create the basic Crow's Foot ERD for Tiny College.

	== Create the UML class diagram that reflects the entities and relationships you identified in the relational diagram.

	== CREATE OO MODEL
]
