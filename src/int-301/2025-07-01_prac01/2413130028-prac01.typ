#import "@preview/showybox:2.0.4": showybox

#set page(header: [
	*2413130028 นายทรงพล อนันต์เนติกุล*
	#line(length: 100%)
])
#set text(font: "Noto Sans Thai")

#show heading: set text(size: 12pt)
#show heading.where(level: 1): set text(size: 16pt)
#show heading.where(level: 2): set heading(numbering: (.., last) => [#last)])

#let section(body) = {
	set par(leading: 0.75em, first-line-indent: (amount: 1.5em, all: true))
	set list(indent: 1.5em)
	set enum(indent: 1.5em)
	body
}

= แบบฝึกหัดบทที่ 1

ตอบคำถามด้วยการอธิบายให้เข้าใจ (เป็นภาษาไทย)

#section[
	== อธิบายความหมายของคำต่อไปนี้ พร้อมยกตัวอย่าง

	+ Data: ข้อมูลดิบที่ยังไม่ได้ผ่านการประมวลผล เช่น ตัวเลข ตัวอักษร หรือสัญลักษณ์ต่าง ๆ ที่ใช้ในการเก็บข้อมูล เช่น `"123"`, `"Hello"`, `"2023-10-01"`
	+ Field: ข้อมูลที่นำมาใช้ในการจัดเก็บข้อมูลในฐานข้อมูล เช่น ชื่อ, นามสกุล, วันเกิด
	+ Record: ชุดข้อมูลที่ถูกจัดเก็บในฐานข้อมูล ซึ่งประกอบด้วยฟิลด์ต่าง ๆ ที่เกี่ยวข้องกัน เช่น ข้อมูลของนักเรียนคนหนึ่งอาจประกอบด้วยฟิลด์ชื่อ, นามสกุล, วันเกิด และเกรด
	+ File: หน่วยข้อมูลที่ใช้ในการจัดเก็บข้อมูลในระบบไฟล์ เช่น ไฟล์ข้อความ, ไฟล์ภาพ, ไฟล์เสียง ซึ่งสามารถมีข้อมูลหลายเรคคอร์ดอยู่ภายใน

	== อธิบายความหมายและความเป็น Data Redundancy ในเรื่อง File Management System มีลักษณะแบบนั้นหรือไม่ เพราะเหตุใด

	- Data Redundancy หมายถึง การมีข้อมูลซ้ำซ้อนในระบบ ซึ่งอาจเกิดขึ้นเมื่อข้อมูลเดียวกันถูกเก็บไว้ในหลายที่หรือหลายรูปแบบ ทำให้เกิดการใช้พื้นที่จัดเก็บข้อมูลมากขึ้นและอาจทำให้เกิดความไม่สอดคล้องกันของข้อมูล
	- ใน File Management System มักมีลักษณะของ Data Redundancy เนื่องจากข้อมูลอาจถูกเก็บไว้ในหลายไฟล์หรือหลายโฟลเดอร์ ซึ่งอาจทำให้เกิดปัญหาในการจัดการข้อมูล เช่น การอัปเดตข้อมูลในไฟล์หนึ่งแต่ไม่ได้อัปเดตในไฟล์อื่น ๆ ทำให้ข้อมูลไม่สอดคล้องกัน

	== อะไรคือ Data Independence อธิบายความสำคัญของ Data Independence \ และทำไม File System ถึงได้ขาดคุณสมบัตินี้

	- Data Independence คือ ความสามารถในการเปลี่ยนแปลงโครงสร้างของข้อมูลโดยไม่กระทบต่อโปรแกรมที่ใช้งานข้อมูลนั้น ๆ ซึ่งมีความสำคัญเพราะช่วยให้การพัฒนาระบบฐานข้อมูลมีความยืดหยุ่นและสามารถปรับปรุงได้ง่าย
	- File System ขาดคุณสมบัตินี้เพราะการเปลี่ยนแปลงโครงสร้างของไฟล์หรือข้อมูลใน File System มักจะส่งผลกระทบต่อโปรแกรมที่ใช้งานข้อมูลนั้น ๆ ทำให้ต้องมีการปรับปรุงโปรแกรมทุกครั้งที่มีการเปลี่ยนแปลงโครงสร้างข้อมูล

	== อะไรคือ DBMS และอะไรคือหน้าที่ของ DBMS

	- DBMS หรือ Database Management System คือ Software ที่ช่วยในการจัดการฐานข้อมูล
	- หน้าที่ของ DBMS คือ การจัดการข้อมูลในฐานข้อมูลอย่างมีประสิทธิภาพ โดยให้ผู้ใช้สามารถสร้าง แก้ไข ลบ และเข้าถึงข้อมูลได้อย่างง่ายดาย นอกจากนี้ยังช่วยในการจัดการความสัมพันธ์ระหว่างข้อมูลต่าง ๆ ในฐานข้อมูล รวมถึงการรักษาความปลอดภัยของข้อมูลและการสำรองข้อมูล (backup) เพื่อป้องกันการสูญหายของข้อมูล


	== อธิบายความแตกต่างของ Data กับ Information อย่างละเอียด

	+ Data หรือ ข้อมูลดิบ คือ ข้อเท็จจริงซึ่งได้มาจากกระบวนการรวบรวมข้อมูล แต่ยังไม่ผ่านการประมวลผล ยังไม่มีความหมายในตัวเอง ยังไม่สามารถนำไปช่วยประกอบการตัดสินใจได้ สามารถจัดเก็บได้หลายรูปแบบ เช่น ตัวเลข ตัวอักษร ภาพ เสียง ฯลฯ
	+ Information หรือ สารสนเทศ คือ ข้อมูลที่ผ่านการประมวลผลและการตีความแล้ว โดยการนำข้อมูลมาจัดรูป จัดเรียง กลั่นกรอง และประกอบรวมกับบริบท จึงทำให้มีความหมายในตัวเอง สามารถนำไปใช้ประกอบการตัดสินใจตามวัตถุประสงค์ให้เป็นประโยชน์ได้

	== บทบาทหน้าที่ของ DBMS คืออะไร ข้อดี-ข้อเสีย ของ DBMS คือ?

	- บทบาทหน้าที่ของ DBMS คือ การจัดการข้อมูลในฐานข้อมูลอย่างมีประสิทธิภาพ โดยให้ผู้ใช้สามารถสร้าง แก้ไข ลบ และเข้าถึงข้อมูลได้อย่างง่ายดาย นอกจากนี้ยังช่วยในการจัดการความสัมพันธ์ระหว่างข้อมูลต่าง ๆ ในฐานข้อมูล รวมถึงการรักษาความปลอดภัยของข้อมูลและการสำรองข้อมูล (backup) เพื่อป้องกันการสูญหายของข้อมูล
	- ข้อดีของ DBMS คือ
		+ ช่วยให้การจัดการข้อมูลเป็นไปอย่างมีประสิทธิภาพ
		+ ลดความซ้ำซ้อนของข้อมูล
		+ เพิ่มความถูกต้องและความน่าเชื่อถือของข้อมูล
		+ มีระบบรักษาความปลอดภัยของข้อมูล
	- ข้อเสียของ DBMS คือ
		+ มีค่าใช้จ่ายในการติดตั้งและบำรุงรักษาสูง
		+ ต้องการทรัพยากรระบบมากขึ้น
		+ อาจมีความซับซ้อนในการใช้งาน

	== อธิบาย Types of Databases

	+ Hierarchical Database Model หรือ แบบจำลองฐานข้อมูลลำดับชั้น มีโครงสร้างคล้ายต้นไม้ มีความสัมพันธ์ระหว่างข้อมูลแบบ parent (พ่อแม่/ผู้ปกครอง) และ child (ลูก) โดย parent สามารถมีได้หลาย child แต่ แต่ละ child สามารถมี parent ได้เพียงหนึงเดียว (หรือก็คือ parent เป็นเจ้าของ child และ child เป็นของ parent) มีรูปแบบความสัมพันธ์ได้สูงสุดคือ 1:N (one-to-many; one parent can have many children)

	+ Network Database Model หรือ แบบจำลองฐานข้อมูลเครือข่าย มีโครงสร้างที่ยืดหยุ่นมากขึ้นจาก Hierarchical Database Model โดยให้ child สามารถมี parent ได้มากกว่าหนึ่ง และ parent ก็สามารถมี child ได้มากกว่าหนึ่ง มีรูปแบบความสัมพันธ์ได้สูงสุดคือ M:N (many-to-many; many parents can have many children)

	+ Relational Database Model หรือ แบบจำลองฐานข้อมูลเชิงสัมพันธ์ เป็นแบบจำลองที่ใช้ตารางในการจัดเก็บข้อมูล โดยข้อมูลจะถูกจัดเก็บในรูปแบบของแถว (row) และคอลัมน์ (column) ซึ่งแต่ละตารางจะมีความสัมพันธ์กันผ่านการใช้คีย์ (key) เช่น primary key และ foreign key

	+ Object Database Model หรือ แบบจำลองฐานข้อมูลเชิงวัตถุ เป็นแบบจำลองที่ใช้แนวคิดของการเขียนโปรแกรมเชิงวัตถุ (Object-Oriented Programming) ในการจัดเก็บข้อมูล โดยข้อมูลจะถูกจัดเก็บในรูปแบบของวัตถุ (object) ซึ่งสามารถมีคุณสมบัติ (attribute) และพฤติกรรม (behavior)

	== องค์ประกอบหลักของ Database System มีอะไรบ้าง?

	+ Hardware
	+ Software
	+ Data
	+ People
	+ Procedure

	== อะไรคือ Metadata

	Metadata คือ ข้อมูลเสริมที่อธิบายข้อมูลหลัก โดยให้รายละเอียดเกี่ยวกับโครงสร้างของข้อมูล เช่น ชื่อฟิลด์ ประเภทข้อมูล ขนาดของข้อมูล และความสัมพันธ์ระหว่างข้อมูลต่าง ๆ ซึ่งช่วยให้ผู้ใช้และโปรแกรมสามารถเข้าใจและจัดการกับข้อมูลได้อย่างมีประสิทธิภาพ

	== อธิบายว่าทำไม Database Design ถึงเป็นสิ่งสำคัญ

	+ ช่วยให้จัดเก็บข้อมูลได้อย่างมีประสิทธิภาพ (Efficiency)
	+ ข้อมูลมีความสม่ำเสมอ (Consistency)
	+ ช่วยลดความซ้ำซ้อนของข้อมูล (Redundancy)
	+ เพิ่มความถูกต้องของข้อมูล (Integrity)
	+ ช่วยให้การจัดการข้อมูลเป็นไปอย่างรวดเร็วและมีประสิทธิภาพมากขึ้น (Performance)

	#line(length: 100%)
]

#context counter(heading).update((1, 0))

#pagebreak()

= ตอนที่ 2 ส่วนขอการใช้

ให้ออกแบบ *ER Diagram* จาก

#showybox[
	*ตัวอย่าง* ฐานข้อมูลของโรงพยาบาล
	- รักษาคนไข้นอก: คนไข้, อาการ ณ วันตรวจ, แพทย์, รับยา, การเงิน
	- รักษาคนไข้ใน: ประวัติคนไข้, ห้องพัก, เตียง, ประกัน, แพทย์, การเงิน, ยาที่ใช้แต่ละวัน, อาหารทุกมื้อ
	- จัดการบุคคลากร: แผนก, พนักงาน, ประวัติการทำงาน, ประเมินผล, ห้องทำงาน, สวัสดิการ
	- ...

	หมอ : คนไข้ = M:N
]

#text(size: 12pt)[*แบบจำลองข้อมูล*]

#let er(l, rel, r) = [#raw(l) #sym.arrow.l #raw(rel) #sym.arrow.r #raw(r)]

#set text(size: 10pt)
#section[
	== ฐานข้อมูลนี้เต้องเก็บอะไรบ้าง?

	- Patient: คนไข้
	- Doctor: แพทย์
	- Case: กรณีการรักษา (เคส)
	- Department: แผนก
	- Medication: ยา
	- Treatment: การรักษา
	- Payment: การชำระเงิน

	== ข้อมูลที่เก็บมีความสัมพันธ์กันอย่างไร?

	- #er("Patient", "M:N", "Doctor") \
		คนไข้แต่ละคนสามารถมีแพทย์ได้หลายคน และแพทย์แต่ละคนสามารถรักษาคนไข้ได้หลายคน
		- #er("Patient", "1:N", "Case") \
			คนไข้แต่ละคนสามารถมีได้หลายเคส แต่เคสการรักษาหนึ่งจะมีคนไข้ได้เพียงคนเดียว
		- #er("Case", "N:1", "Doctor") \
			เคสการรักษาหนึ่งสามารถมีแพทย์ได้เพียงคนเดียว แต่แพทย์หนึ่งคนสามารถรักษาเคสได้หลายเคส
	- #er("Doctor", "1:N", "Department") \
		แพทย์แต่ละคนจะอยู่ในแผนกเดียว แต่แผนกหนึ่งสามารถมีแพทย์ได้หลายคน
	- #er("Case", "M:N", "Medication") \
		เคสการรักษาหนึ่งสามารถมีการใช้ยาหลายตัว และยาแต่ละตัวสามารถใช้ได้ในหลายเคส
		- #er("Case", "1:N", "Treatment") \
			เคสการรักษาหนึ่งสามารถมีได้หลายการรักษา แต่การรักษาหนึ่งจะเกี่ยวข้องกับเคสการรักษาได้เพียงหนึ่งเคส
		- #er("Treatment", "1:N", "Medication") \
			การรักษาหนึ่งสามารถใช้ยาได้หลายตัว แต่ยาแต่ละตัวจะเกี่ยวข้องกับเพียงการรักษาเดียว
	- #er("Case", "1:1", "Payment") \
		เคสการรักษาหนึ่งสามารถมีการชำระเงินได้เพียงหนึ่งครั้ง และการชำระเงินหนึ่งครั้งจะเกี่ยวข้องกับเคสการรักษาได้เพียงหนึ่งเคส
]

#pagebreak()

== ข้อมูลแต่ละตัวหมายถึงอะไร?

#table(
	columns: (1fr, 1fr, 1fr ),
	[
		*CASE*
		- *`id`*: รหัสกรณีการรักษา (PK)
		- `patient_id`: รหัสคนไข้ (FK)
		- `doctor_id`: รหัสแพทย์ (FK)
		- `date`: วันที่รักษา
		- `notes`: หมายเหตุ
		- `symptoms`: อาการป่วย
	],
	[
		*PATIENT*
		- *`id`*: รหัสคนไข้ (PK)
		- `first_name`: ชื่อ
		- `last_name`: นามสกุล
		- `date_of_birth`: วันเกิด
		- `gender`: เพศ
		- `phone`: เบอร์โทรศัพท์
		- `address`: ที่อยู่
	],
	[
		*DOCTOR*
		- *`id`*: รหัสแพทย์ (PK)
		- `first_name`: ชื่อ
		- `last_name`: นามสกุล
		- `department_id`: แผนก
		- `phone`: เบอร์โทรศัพท์
	],
	[
		*DEPARTMENT*
		- *`id`*: รหัสแผนก (PK)
		- `name`: ชื่อแผนก
		- `phone`: เบอร์โทรศัพท์
	],
	[
		*MEDICATION*
		- *`id`*: รหัสยา (PK)
		- `name`: ชื่อยา
		- `effect`: ฤทธิ์ของยา
		- `side_effect`: ผลข้างเคียง
		- `price`: ราคา
	],
	[
		*TREATMENT*
		- *`id`*: รหัสการรักษา (PK)
		- `case_id`: รหัสกรณีการรักษา (FK)
		- `med_id`: รหัสยา (FK)
		- `dosage`: ปริมาณที่ใช้
		- `description`: รายละเอียดการรักษา
	],
	[
		*PAYMENT*
		- *`id`*: รหัสการชำระเงิน (PK)
		- `case_id`: รหัสกรณีการรักษา (FK)
		- `amount`: จำนวนเงิน
		- `payment_date`: วันที่ชำระเงิน
		- `method`: วิธีการชำระเงิน
	],
)

#showybox(image("./lucidchart-erd.jpeg"))
